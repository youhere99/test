<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/mvc  
       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">  
       
      <!-- 最重要:::如果放在spring-context.xml中，这里的aop设置将不会生效 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
       
       <context:component-scan base-package="controller,word,rest" />
       
  
  <!-- 配置数据源 -->
<!--     <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"	destroy-method="close">  -->
<!--         <property name="driverClass"> -->
<!--             <value>com.mysql.jdbc.Driver</value> -->
<!--         </property> -->
<!--         <property name="jdbcUrl"> -->
<!--             <value>jdbc:mysql://192.168.2.201:3306/sso?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;zeroDateTimeBehavior=convertToNull</value> -->
<!--         </property> -->
<!--         <property name="user"> -->
<!--             <value>root</value> -->
<!--         </property> -->
<!--         <property name="password"> -->
<!--             <value>root</value> -->
<!--         </property> -->
<!--         连接池中保留的最小连接数。 -->
<!--         <property name="minPoolSize"> -->
<!--             <value>5</value> -->
<!--         </property> -->
<!--         连接池中保留的最大连接数。Default: 15 -->
<!--         <property name="maxPoolSize"> -->
<!--             <value>30</value> -->
<!--         </property> -->
<!--         初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
<!--         <property name="initialPoolSize"> -->
<!--             <value>10</value> -->
<!--         </property> -->
<!--         最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
<!--         <property name="maxIdleTime"> -->
<!--             <value>60</value> -->
<!--         </property> -->
<!--         当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
<!--         <property name="acquireIncrement"> -->
<!--             <value>5</value> -->
<!--         </property> -->
<!--         JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 -->
<!--             如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0  -->
<!--         <property name="maxStatements"> -->
<!--             <value>0</value> -->
<!--         </property> -->
<!--         每60秒检查所有连接池中的空闲连接。Default: 0 -->
<!--         <property name="idleConnectionTestPeriod"> -->
<!--             <value>60</value> -->
<!--         </property> -->
<!--         定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
<!--         <property name="acquireRetryAttempts"> -->
<!--             <value>1</value> -->
<!--         </property> -->
<!--         获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 -->
<!--             获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
<!--         <property name="breakAfterAcquireFailure"> -->
<!--             <value>false</value> -->
<!--         </property> -->
<!--         因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable -->
<!--             等方法来提升连接测试的性能。Default: false  -->
<!--         <property name="testConnectionOnCheckout"> -->
<!--             <value>false</value> -->
<!--         </property> -->
<!--     </bean> -->

<!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"> -->
<!--     <property name="dataSource" ref="dataSource"/>  -->
<!--     <property name="packagesToScan"> -->
<!--     	<list> -->
<!--     		<value>com.**.entity</value> -->
<!--     	</list> -->
<!--     </property> -->
<!--     <property name="hibernateProperties"> -->
<!--  			<props> -->
<!--                 <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop> -->
<!--                 <prop key="hibernate.show_sql">true</prop> -->
<!--                 <prop key="hibernate.format_sql">true</prop> -->
<!--                 <prop key="hibernate.default_batch_fetch_siz">4</prop> -->
<!--                 <prop key="hibernate.max_fetch_depth">2</prop> -->
<!--                 <prop key="hibernate.order_updates">true</prop> -->
<!--                 <prop key="hibernate.query.substitutions">true 1, false 0</prop> -->
<!--                 <prop key="hibernate.autoReconnect">true</prop> -->
<!--                 <prop key="hibernate.bytecode.use_reflection_optimizer">false</prop> -->
<!--                 <prop key="hibernate.connection.release_mode">after_transaction</prop> -->
<!--                 <prop key="hibernate.cache.use_second_level_cache">true</prop> -->
<!--                 <prop key="hibernate.cache.use_query_cache">true</prop> -->
<!--                 <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop> -->
<!--               <prop key="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheRegionFactory</prop>  -->
<!--                 <prop key="net.sf.ehcache.configurationResourceName">/ehcache.xml</prop> -->
<!--                 <prop key="hibernate.generate_statistics">true</prop> -->
<!--                 <prop key="hibernate.cache.use_structured_entries">true</prop> -->
                
<!--            </props> -->
<!--     </property> -->
<!-- 		<property name="lobHandler"> -->
<!-- 			<ref bean="lobHandler" /> -->
<!-- 		</property> -->
<!-- </bean> -->

<!-- <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true" /> -->
<!-- cacheManager, 指定ehcache.xml的位置 -->
<!--     <bean id="cacheManagerEhcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"> -->
<!--         <property name="configLocation"> -->
<!--             <value>classpath:ehcache.xml</value> -->
<!--         </property> -->
        <!-- 由于hibernate也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->
<!--         <property name="shared" value="true"/> -->
<!--     </bean> -->


<!-- <bean id="springTransactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"> -->
<!-- 		<property name="sessionFactory" ref="sessionFactory" /> -->
<!-- 	</bean> -->
<!-- 使用annotation定义事务，对于要加入事物的类，只需对该类加 @Transactional  -->
<!--     <tx:annotation-driven transaction-manager="springTransactionManager" /> -->
    
<!--      <tx:advice id="txAdvice" transaction-manager="springTransactionManager"> -->
<!--         <tx:attributes> -->
      	
<!--             <tx:method name="saveLog" propagation="REQUIRES_NEW" /> -->
<!--             <tx:method name="save*" propagation="REQUIRED" rollback-for=""/> -->
<!--             <tx:method name="add*" propagation="REQUIRED" /> -->
<!--             <tx:method name="update*" propagation="REQUIRED" /> -->
<!--             <tx:method name="del*" propagation="REQUIRED" /> -->
<!--             <tx:method name="build*" propagation="REQUIRES_NEW"/> -->
            <!--  hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
<!--             <tx:method name="get*" propagation="REQUIRED" read-only="true" /> -->
<!--             <tx:method name="exist*" propagation="REQUIRED" read-only="true" /> -->
<!--             <tx:method name="check*" propagation="REQUIRED" read-only="true" /> -->
<!--             <tx:method name="count*" propagation="REQUIRED" read-only="true" /> -->
<!--             <tx:method name="find*" propagation="REQUIRED" read-only="true" /> -->
<!--             <tx:method name="query*" propagation="REQUIRED" read-only="true" /> -->
            
<!--             <tx:method name="*" read-only="true" /> -->
<!--         </tx:attributes> -->
<!--     </tx:advice> -->
    
	<!-- 日志记录切面 -->
<!--     <aop:config expose-proxy="true"> -->
     <!--    只对业务逻辑层实施事务  -->
<!--      <aop:pointcut id="txPointcut" expression="execution(* com.zdy.service..*(..))" /> -->
<!--      <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/> -->
<!--     </aop:config> -->
    
   
</beans>